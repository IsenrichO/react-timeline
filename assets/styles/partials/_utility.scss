
/* Reusable CSS Utility Classes
–––––––––––––––––––––––––––––––––––––––––––––––––– */

// 
.flex {
  &-row { @include flex(flex, row nowrap); }
  &-col { @include flex(flex, column nowrap); }
}

// Apply to text body:
.text-wrap {
  word-break: break-word;
  word-wrap: break-word;
  overflow-wrap: break-word;
  white-space: pre-wrap;
  text-overflow: ellipsis;
}

// Apply where `text-overlay` should be width-constrained and delimited by an ending ellipsis:
.text-of {
  word-break: break-word;
  word-wrap: break-word;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

// Used to give cursor indication of an explicitly non-allowable action:
.disallow { cursor: not-allowed; }

// .empty-summary {
//   height: 50px;
//   background: transparent url("data:image/svg+xml;utf8,<svg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'><g fill='%23E8BAA5' fill-opacity='0.4' fill-rule='evenodd'><path d='M5 0h1L0 6V5zM6 5v1H5z'/></g></svg>") repeat center;
//   background-clip: content-box;
// }

.no-content:before {
  position: relative;
  content: attr(data-fallback);
  width: 100%;
  text-align: center;
  font: oblique normal lighter 1.5rem 'Helvetica Neue', sans-serif;
  line-height: inherit;
}

// .tl-row-summary {
//   @include flex(flex, row nowrap, flex-start);
//   margin-top: 0 !important;
//   > em { width: 100%; }
// }

// Overrides Bootstrap `.hidden` class' display property:
// .hidden,
// .shown { display: block !important; }
// .hidden {
//   height: 4em;
//   line-height: 1em;
// }
// .shown + .show-more-wrapper .separator-fade:before { opacity: 0; }

// .show-more-wrapper {
//   position: relative;
//   width: 100%;
//   padding: 0 1rem;
//   text-align: center;
//   .shown + & .separator-fade:before { opacity: 0; }
//   .show-more {
//     @include flex();
//     @include cbTransform(translate(-50%, -50%));
//     position: absolute;
//     width: inherit;
//     left: 50%;
//     top: 1.25em;
//     padding: inherit;
//     overflow: hidden;
//     .bg-line {
//       width: 45%;
//       &:before {
//         display: block;
//         content: '';
//         border-bottom: 1px solid #C3C3C3;
//       }
//     }
//     > a {
//       padding: inherit;
//       white-space: nowrap;
//       color: $show-more-link;
//       font-variant: small-caps;
//       font-weight: 500;
//       text-decoration: none;
//     }
//   }
// }

// .separator-fade {
//   position: relative;
//   height: 16px;
//   margin: 0;
//   border: 0;
//   &:before {
//     @include cbTransition(0.575s cubic-bezier(0, 0.25, 0.7, 0.4), opacity);
//     position: absolute;
//     content: '';
//     width: 100%;
//     height: 40px;
//     left: 0;
//     bottom: 0;
//     background-image: linear-gradient(
//       to top,
//       #FFF 40%,
//       rgba(255, 255, 255, 0.75) 82%,
//       rgba(255, 255, 255, 0.5) 90%,
//       transparent
//     );
//   }
// }

/* Clearfix
 * For modern browsers...
 * 1. The space content is one way to avoid an Opera bug when the
 *    contenteditable attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that are clearfixed.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 *
 * See <http://nicolasgallagher.com/micro-clearfix-hack/>
 */
.cf {
  &:before,
  &:after {
    content: " ";   // 1.
    display: table; // 2.
  }
  &:after { clear: both; }
}

// Include this rule to trigger hasLayout and contain floats for IE 6/7 only:
.cf { *zoom: 1; }

// Styles to apply for collapsed `.panel-body` and `.panel-footer` elements:
.tl-collapsed {
  @extend %hidden;
  max-height: 0 !important;
  padding: 0 !important;
  overflow: hidden;
  transition: all 0.5s ease;
}
.panel-body,
.panel-footer {
  transition: all 0.5s ease;
}

.modal-active {
  height: 100vh !important;
  overflow: hidden !important;
}

// Custom checkbox inputs:
.checkbox { margin: 0; }
input[type='checkbox'] {
  position: absolute;
  left: -9999px;
  visibility: hidden;
  + label {
    position: relative;
    padding-left: 2.5rem;
    cursor: pointer;
    &:before {
      @include cbTransition();
      position: absolute;
      content: '';
      width: 1rem;
      height: 1rem;
      left: 0.35rem;
      border: 2.5px solid $cb-unchecked;
      border-radius: 3px;
    }
  }
  &:checked {
    + label {
      &:before {
        @include cbBorder();
        width: 12px;
        height: 22px;
        left: 0.15rem;
        top: -9px;
        transform: rotate(40deg);
      }
    }    
  }
  &.batch-select {
    + label:before {
      width: 1.75rem;
      height: 1.75rem;
      left: -0.25rem;
    }
    &:checked + label:before {
      width: 1rem;
      height: 2rem;
      top: 0.05rem;
      left: 0.5rem !important;
    }
  }
}
.tl-event-invert input[type='checkbox'] {
  &:checked + label:before,
  + label:before {
    left: auto;
    right: 0.25rem;
  }
}

.form-btn {
  min-width: 20%;
  margin-left: 1rem;
  padding: 0.75rem 1.75rem;
  float: right;
  border: none;
  border-bottom: 4px solid $buttonface;
  border-radius: 8px;
  transition: all 0.05s linear;
  color: $theme-content-lt;
  font: normal normal bolder 1.4rem/1.4rem 'Helvetica Neue', Arial, sans-serif;
  &:hover { @extend %button-hover; }
  &:active { @extend %button-active; }
  &[disabled] {
    @extend %button-active;
    @extend %disallow;
    color: rgba(255, 255, 255, 0.65);
  }
}

.tooltip {
  @include cbTransition(0.45s 0.35s ease-in-out);
  @extend %hidden;
  position: absolute;
  right: calc(100% + 0.75rem);
  top: 50%;
  padding: 0.25rem 1rem;
  border-radius: 1rem;
  transform: translateY(-50%);
  color: $theme-content-lt;
  background-color: #888;
  white-space: pre;
  font-size: 1.25rem;
  z-index: 2;
  .batch-action-btns:hover &,
  .btn-controls-child:hover & { @extend %visible; }
}
