// {
//   "extends": [
//     "airbnb",
//     // "eslint:recommended",
//     // "plugin:jsx-a11y/recommended",
//     // "plugin:react/recommended",
//   ],
//   "env": {
//     "amd": true,
//     "browser": true,
//     "commonjs": true,
//     "es6": true,
//     "jasmine": true,
//     "jest": true,
//     "jquery": true,
//     "mocha": true,
//     "mongo": true,
//     "node": true,
//     "protractor": true,
//     "serviceworker": true,
//     "shared-node-browser": true,
//     "worker": true,
//   },
//   "globals": {
//     "beforeEach": true,
//     "describe": true,
//     "expect": true,
//     "it": true,
//     "React": true,
//     "xdescribe": true,
//     "xit": true,
//   },
//   "parserOptions": {
//     "parser": "babel-eslint",
//     "ecmaVersion": 7,
//     "ecmaFeatures": {
//       "allowImportExportEverywhere": false,
//       "classes": true,
//       "experimentalObjectRestSpread": true,
//       "globalReturn": false,
//       "impliedStrict": true,
//       "jsx": true,
//     },
//     "sourceType": "module",
//   },
//   "plugins": [
//     // "import",
//     // "jsx-a11y",
//     // "react",
//     // "react-native",
//   ],
  "rules": {
    // "strict": [2, "global"],  // Default "safe" string option maps to "global" because the
                              // config specifies both the 'node' & 'commonjs' environments.

    /* BEST PRACTICES */
    // "consistent-return": 0,
    // "eqeqeq": [2, "smart"],   // CORRECT: `typepof foo == 'undefined'`
    // "no-class-assign": 2,
    // "no-extra-boolean-cast": 0, // CORRECT: `!!value !== 0`
    // "no-func-assign": 2,
    // "no-this-before-super": 2,
    // "no-useless-computed-key": 2,
    // "no-useless-concat": 2,
    // "no-useless-constructor": 2,
    // "no-useless-rename": [2, {
    //   "ignoreImport": true,
    //   "ignoreExport": true,
    //   "ignoreDestructuring": true,
    // }],
    // "no-var": 2,
    // "prefer-arrow-callback": [2, {
    //   "allowNamedFunctions": false,
    //   "allowUnboundThis": false,
    // }],
    // "prefer-const": [2, {
    //   "destructuring": "any",
    //   "ignoreReadBeforeAssign": false,
    // }],
    // "prefer-destructuring": [2, {
    //   "VariableDeclarator": {
    //     "array": false,
    //     "object": true,
    //   },
    //   "AssignmentExpression": {
    //     "array": true,
    //     "object": false,
    //   },
    // }, {
    //   "enforceForRenamedProperties": false,
    // }],
    // "prefer-rest-params": 2,
    // "prefer-spread": 2,
    // "prefer-template": 2,
    // "require-yield": 2,
    // "rest-spread-spacing": 2,
    // "semi": [2, "always", {
    //   "omitLastInOneLineBlock": false,
    // }],
    // "symbol-description": 1,
    // "no-undef": [2, {
    //   "typeof": true,
    // }],
    
    //  POSSIBLE ERRORS 
    // "valid-jsdoc": 2,

    /* STYLISTIC RULES */
    // "arrow-parens": [2, "always", {
    //   "requireForBlockBody": false,
    // }],
    // "comma-dangle": [2, {
    //   "arrays": "always-multiline",
    //   "objects": "always-multiline",
    //   "imports": "always-multiline",
    //   "exports": "always-multiline",
    //   "functions": "always-multiline",
    // }],
    // "eol-last": [2, "always"],
    // "indent": [2, 2],
    // "jsx-quotes": [2, "prefer-double"],
    // "max-len": [2, {
    //   "code": 120,
    //   "ignoreComments": true,
    //   "ignoreStrings": true,
    //   "ignoreTemplateLiterals": true,
    //   "ignoreTrailingComments": true,
    //   "ignoreUrls": true,
    //   "tabWidth": 2,
    // }],
    // "no-dupe-args": 2,
    // "no-dupe-class-members": 2,
    // "no-dupe-keys": 2,
    // "no-extra-parens": [2, "all", {
    //   "conditionalAssign": true,
    //   "enforceForArrowConditionals": true,
    //   "ignoreJSX": "all",
    //   "nestedBinaryExpressions": true,
    //   "returnAssign": true,
    // }],
    // "no-extra-semi": 2,
    // "no-trailing-spaces": [2, {
    //   "skipBlankLines": false,
    // }],
    // "one-var": [2, {
    //   "var": "always",  // Exactly one `var` declaration per function
    //   "let": "always",  // Exactly one `let` declaration per block
    //   "const": "never", // Exactly one declarator per `const` declaration per block
    // }],
    // "object-shorthand": [2, "always", {
    //   "avoidExplicitReturnArrows": true,
    //   "avoidQuotes": false,
    //   "ignoreConstructors": false,
    // }],
    // "quotes": [2, "single", {
    //   "allowTemplateLiterals": true,
    //   "avoidEscape": true,
    // }],
    // "semi-spacing": [2, {
    //   "before": false,
    //   "after": true,
    // }],
    // "sort-imports": [2, {
    //   "ignoreCase": true,
    //   "ignoreMemberSort": false,
    //   "memberSyntaxSortOrder": [
    //     "single",
    //     "multiple",
    //     "all",
    //     "none",
    //   ],
    // }],
    // "sort-keys": [2, "asc", {
    //   "caseSensitive": true,
    //   "natural": true,
    // }],
    // "sort-vars": [2, {
    //   "ignoreCase": false,
    // }],
    // "template-curly-spacing": [2, "never"],
    // "wrap-iife": [2, "inside", {        // CORRECT: `const x = (function () { return { y: 1 };})();`
    //   "functionPrototypeMethods": true, // CORRECT: `const x = (function(){ foo(); }).call(bar)`
    // }],
    // "wrap-regex": 2,
    // "yield-star-spacing": [2, {
    //   "before": false,
    //   "after": true,
    // }],

    /* IMPORT PLUGIN */
    // "import/default": 2,
    // "import/export": 2,
    // "import/extensions": [2, "never", {
    //   "json": "always",
    //   "sass": "always",
    //   "scss": "always",
    //   "svg": "always",
    // }],
    // "import/first": 2,
    // "import/max-dependencies": [2, {
    //   "max": 20,
    // }],
    // "import/named": 2,
    // "import/newline-after-import": [2, {
    //   "count": 1,
    // }],
    // "import/no-absolute-path": 2,       // INCORRECT: `import foo from '/foo';`
    // "import/no-amd": 2,
    // "import/no-anonymous-default-export": [2, {
    //   "allowArray": false,              // INCORRECT: `export default ['foo', 'bar'];`
    //   "allowArrowFunction": true,       // CORRECT:   `export default () => { console.log('Hello World!'); };` 
    //   "allowAnonymousClass": false,     // INCORRECT: `export default class { /* class internals */ };`
    //   "allowAnonymousFunction": true,   // CORRECT:   `export default function() { /* function internals */ };`
    //   "allowLiteral": false,            // INCORRECT: `export default 42;`
    //   "allowObject": true,              // CORRECT:   `export default { name: 'Oliver' };`
    // }],
    // "import/no-commonjs": 2,
    // "import/no-deprecated": 1,
    // "import/no-duplicates": 2,
    // "import/no-dynamic-require": 1,
    // "import/no-extraneous-dependencies": [2, {
    //   "devDependencies": [  // Specify allowable deps by glob patterns
    //     "**/*.js",          // -> General *.js-extension files
    //     "**/*.jsx",         // -> React-specific *.jsx-extension files
    //     "**/*.test.js",     // -> Test suite *.js-extension files
    //     "**/*.spec.js",     // -^
    //   ],
    //   "optionalDependencies": true,
    //   "peerDependencies": true,
    //   "packageDir": "./",   // Specifies path to the folder against whose package.json file the above are referenced
    // }],
    // "import/no-internal-modules": [2, {
    //   "allow": [
    //     "**/actions/*",   // Whitelist Redux actions dir
    //     "**/src/**/*",    // Whitelist primary app dir
    //   ],
    // }],
    // "import/namespace": [2, {
    //   "allowComputed": true,    // CORRECT: `import * as foo from './foo';`
    // }],                         //          `console.log(foo['bar']);`
    // "import/no-mutable-exports": 2,
    // "import/no-named-as-default": 2,
    // "import/no-named-as-default-member": 2,
    // "import/no-named-default": 1,
    // "import/no-namespace": 0,
    // "import/no-nodejs-modules": [2, {
    //   "allow": [
    //     "fs",       // Node.js FileSystem Module
    //     "path",     // Node.js path Module
    //   ],
    // }],
    // "import/no-unassigned-import": [2, {
    //   "allow": [
    //     "styles/*.scss",
    //   ],
    // }],
    // "import/no-unresolved": [2, {
    //   "amd": false,       // INCORRECT: `define(['./foo'], function (foo) { /*...*/ });`
    //   "commonjs": false,  // INCORRECT: `const { default: x } = require('./foo');`
    //   // Default Setting: { "es6": true } -> CORRECT: `import { bar } from 'foo';`
    //   "caseSensitive": true,
    //   // "ignore": [],
    // }],
    // "import/no-webpack-loader-syntax": 2,
    "import/order": [2, {
      "groups": [
        "builtin",  // CORRECT: `import fs from 'fs';`
        "external", // CORRECT: `import _ from 'lodash';`
        "internal", // CORRECT: `import foo from 'src/foo';`
        "index",    // CORRECT: `import DefaultComponent from './';`
        "sibling",  // CORRECT: `import PureComponent from './PureComponent';`
        "parent",   // CORRECT: `import foo from '../foo';`
      ],
      "newlines-between": "always",
    }],
    // "import/prefer-default-export": 2,


    /* REACT & JSX PLUGIN */
    // "react/boolean-prop-naming": [2, {
    //   "propTypeNames": [
    //     "bool",
    //     "mutuallyExclusiveTrueProps",
    //   ],
    //   "rule": "^(doe|[hw]a|i)s[A-Z]([A-Za-z0-9]?)+",  // CORRECT: `doesWork`, `hasChildren`, `isEnabled`, `wasCalled`
    // }],
    // "react/default-props-match-prop-types": [2, {
    //   "allowRequiredDefaults": true,
    // }],
    // "react/display-name": [2, {
    //   "ignoreTranspilerName": true,
    // }],
    // "react/forbid-component-props": [1, {
    //   "forbid": [],
    // }],

    // "react/forbid-elements": [2, {
    //   "forbid": [{
    //     "element": "i",
    //     "message": "If you are using the <i> tag as a container for an icon, consider using the <button> \
    //       or <input /> tag in its place. If, instead, you're simply intending to render italicized markup, \
    //       fall upon the use of a dedicated CSS selector to apply such typographic styles rather than on \
    //       the non-semantic <i> tag.",
    //   }, {
    //     "element": "b",
    //     "message": "Use of the <b> tag for rendering bold-lettered markup is an anti-pattern. Rely, instead, \
    //       on an appropriate CSS selector with styles to match.",
    //   }],
    // }],

    // "react/forbid-prop-types": [1, {
    //   "forbid": ["any"],          // INCORRECT: `someProp: PropTypes.any`
    // }],
    // // "react/no-array-index": 2,    // INCORRECT: `list.map((item, index) => <ListItem key={index} />)`
    // "react/no-children-prop": 2,  // INCORRECT: `<MyComponent children={['Child1', 'Child2']} />`
    // "react/no-danger": 2,         // INCORRECT: `<div dangerouslySetInnerHTML={{ __html: "Hello World" }}></div>`
    // "react/no-deprecated": 1,     // INCORRECT: `import { PropTypes } from 'react';`
    //                               // CORRECT:   `import PropTypes from 'prop-types';`

    // "react/jsx-sort-props": [2, {
    //   "callbacksLast": true,
    //   "ignoreCase": true,
    //   "noSortAlphabetically": false,
    //   "reservedFirst": [
    //     "children",
    //     "dangerouslySetInnerHTML",
    //     "key",
    //     "ref",
    //     // "__self",   => NOTE: `__self={this}`
    //     // "__source",
    //   ],
    //   "shorthandFirst": true,
    //   "shorthandLast": false,
    // }],
    // "react/jsx-uses-react": 2,
    // "react/jsx-uses-vars": 2,
    // "react/react-in-jsx-scope": 2,

    // /* REACT NATIVE PLUGIN */
    // "react-native/no-color-literals": 1,          // CORRECT: `<MyComponent style={{ color: theme.colors.ltGrey }} />`
    // "react-native/no-inline-styles": 0,           // CORRECT: `<MyComponent style={{ font: this.props.font, width: '100vw' }} />`
    // "react-native/no-unused-styles": 2, 
    // "react-native/split-platform-components": 2,  // CORRECT: 'App.ios.js', 'App.android.js'
  },
  // "settings": {
  //   "import/cache": {
  //     "lifetime": 5,
  //   },
  //   "import/external-module-folders": [
  //     "node_modules",
  //   ],
  //   "import/ignore": [
  //     "node_modules",       // Included by default, but replaced if explicitly configured
  //     "\\.coffee$",         // CoffeeScript       -> Without polyglot parse, fraught with errors
  //     "\\.(s?c|le|sa)ss$",  // CSS/Less/Sass/SCSS -> Disallow unprocessed CSS module parsing
  //   ],
  //   "import/resolver": {
  //     "webpack": {
  //       "config": {
  //         "resolve": {
  //           "modules": [
  //             "./src",
  //             "./node_modules",
  //           ],
  //           "extensions": [
  //             ".coffee",
  //             ".js",
  //             ".json",
  //             ".jsx",
  //           ],
  //           "alias": {
  //             "@": "./src",
  //             "@app": "./src",
  //           },
  //         },
  //       },
  //     },
  //   },
  //   "react": {
  //     "createClass": "createReactClass",  // Default Regex expression for Component Factory
  //     "pragma": "React",                  // Default pragma
  //     "version": "15.4.1",                // Defaults to latest stable React release
  //   },
  //   "propWrapperFunctions": ["forbidExtraProps"], // Names of any wrappers around the `PropTypes` object
  // },
}

/**
 * NOTES:
 *  • "off"   <=>   0   // Disable linting rule
 *  • "warn"  <=>   1   // Turn the rule on as a warning (doesn’t affect exit code)
 *  • "error" <=>   2   // Throw error on occurrence (affects exit code)
 */
